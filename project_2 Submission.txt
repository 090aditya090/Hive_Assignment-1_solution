Objective - The assignment is meant for you to apply learnings of the module on Hive on a real-life dataset. One of the major objectives of this assignment is gaining familiarity with how an analysis works in Hive and how you can gain insights from large datasets.
 
Problem Statement - New York City is a thriving metropolis and just like most other cities of similar size, one of the biggest problems its residents face is parking. The classic combination of a huge number of cars and a cramped geography is the exact recipe that leads to a large number of parking tickets.
 
In an attempt to scientifically analyse this phenomenon, the NYC Police Department regularly collects data related to parking tickets. This data is made available by NYC Open Data portal. We will try and perform some analysis on this data.

Download Dataset - https://data.cityofnewyork.us/browse?q=parking+tickets

Note: Consider only the year 2017 for analysis and not the Fiscal year.

The analysis can be divided into two parts:

 
************************************************************************************************************************************************************
============================================================================================================================================================
************************************************************************************************************************************************************

Part-I: Examine the data
-----------------------------------------------------------------------

hive> create table parking_violation_analysis
    > (
    > summons_number          bigint,
    > plate_id                string,
    > registration_state      string,
    > plate_type              string,
    > issue_date              string,
    > violation_code          int,
    > vehicle_body_type       string,
    > vehicle_make            string,
    > issuing_agency          string,
    > street_code1            int,
    > street_code2            int,
    > street_code3            int,
    > vehicle_expiration_date int,
    > violation_location      string,
    > violation_precinct      int,
    > issuer_precinct         int,
    > issuer_code             int,
    > issuer_command          string,
    > issuer_squad            string,
    > violation_time          string,
    > time_first_observed     string,
    > violation_county        string,
    > violation_in_front_of_or_opposite       string,
    > house_number            string,
    > street_name             string,
    > intersecting_street     string,
    > date_first_observed     int,
    > law_section             int,
    > sub_division            string,
    > violation_legal_code    string,
    > days_parking_in_effect  string,
    > from_hours_in_effect    string,
    > to_hours_in_effect      string,
    > vehicle_color           string,
    > unregistered_vehicle    string,
    > vehicle_year            int,
    > meter_number            string,
    > feet_from_curb          int,
    > violation_post_code     string,
    > violation_description   string,
    > no_standing_or_stopping_violation       string,
    > hydrant_violation      string,
    > double_parking_violation string
    > )   

    > row format delimited
    > fields terminated by ',';

hive>load data local inpath 'file:///tmp/hive_exp2/parking_violation.csv' into table parking_violation_analysis;

hive> set hive.enforce.bucketing = true;
hive> set hive.exec.dynamic.partition=true;
hive> set hive.exec.dynamic.partition.mode=nonstrict;


hive> create table parking_data_analysis 
    > (
    > summons_number          bigint,
    > plate_id                string,
    > registration_state      string,
    > plate_type              string,
    > issue_date              string,
    > violation_code          int,
    > vehicle_body_type       string,
    > vehicle_make            string,
    > issuing_agency          string,
    > street_code1            int,
    > street_code2            int,
    > street_code3            int,
    > vehicle_expiration_date int,
    > violation_location      string,
    > violation_precinct      int,
    > issuer_precinct         int,
    > issuer_code             int,
    > issuer_command          string,
    > issuer_squad            string,
    > violation_time          string,
    > time_first_observed     string,
    > violation_county        string,
    > violation_in_front_of_or_opposite       string,
    > house_number            string,
    > street_name             string,
    > intersecting_street     string,
    > date_first_observed     int,
    > law_section             int,
    > sub_division            string,
    > violation_legal_code    string,
    > days_parking_in_effect  string,
    > from_hours_in_effect    string,
    > to_hours_in_effect      string,
    > vehicle_color           string,
    > unregistered_vehicle    string,
    > vehicle_year            int,
    > meter_number            string,
    > feet_from_curb          int,
    > violation_post_code     string,
    > violation_description   string,
    > no_standing_or_stopping_violation       string,
    > hydrant_violation      string,
    > )
    > partitioned by(double_parking_violation string)
    > clustered by(summons_number) into 200 buckets
    > row format delimited
    > fields terminated by ',';

hive> insert into parking_data_analysis partition(double_parking_violation)
    > select * from parking_violation_analysis where issue_date like'%2017';

==========================================================================================================================================================

1.) Find the total number of tickets for the year.

hive> select count(*) as Total_tickets from parking_data_analysis;

total_tickets
5431903

==========================================================================================================================================================

2.) Find out how many unique states the cars which got parking tickets came from.

hive> select count(distinct(registration_state)) as tickets from parking_data_analysis;

tickets
65

==========================================================================================================================================================

3.) Some parking tickets donâ€™t have addresses on them, which is cause for concern. Find out how many such tickets there are(i.e. tickets where either "Street Code 1" or "Street Code 2" or "Street Code 3" is empty )

hive> select count(*) as parking_tickets from parking_data_analysis
    > where (street_code1=0 or street_code2=0 or street_code3=0);

parking_tickets
1816814


==========================================================================================================================================================
**********************************************************************************************************************************************************
==========================================================================================================================================================




Part-II: Aggregation tasks
---------------------------------------------------------

1.) How often does each violation code occur? (frequency of violation codes - find the top 5)

hive> select violation_code,count(violation_code) as frequency from parking_data_analysis
    > group by violation_code
    > limit 5;

violation_code  frequency
0                227
5                48081
10               25923
15               7
20               319646

=========================================================================================================================================================

2.) How often does each vehicle body type get a parking ticket? How about the vehicle make? (find the top 5 for both)

hive> select vehicle_body_type,count(vehicle_body_type) as frequency from parking_data_analysis
    > group by vehicle_body_type
    > limit 5;

vehicle_body_type       frequency
                         20194
2DHA                     1
2DSE                     10
2F                       3
2P                       1

=========================================================================================================================================================

3.) A precinct is a police station that has a certain zone of the city under its command. Find the (5 highest) frequencies of:
      a.) Violating Precincts (this is the precinct of the zone where the violation occurred)
          
          hive> select violation_precinct, count(violation_precinct) as frequency from parking_data_analysis
              > group by violation_precinct
              > limit 5;

          violation_precinct      frequency
                          0       925596
                          5       67481
                          10      65253
                          15      34
                          20      81888


         
      b.) Issuer Precincts (this is the precinct that issued the ticket)

         hive> select issuer_precinct, count(issuer_precinct) as frequency from parking_data_analysis
             > group by issuer_precinct
             > limit 5;

         issuer_precinct     frequency
                     0       1078403
                     5       66386
                     10      63527
                     15      16
                     20      80418

============================================================================================================================================================

4.) Find the violation code frequency across 3 precincts which have issued the most number of tickets - do these precinct zones have an exceptionally high frequency of certain violation codes?

hive> select issuer_precinct, count(violation_code) as freq_violation_code from parking_data_analysis
    > group by issuer_precinct
    > order by freq_violation_code desc
    > limit 5;

issuer_precinct    freq_violation_code
0                  1078403
19                 266959
14                 200494
1                  168740
18                 162994


============================================================================================================================================================

5.) Find out the properties of parking violations across different times of the day: The Violation Time field is specified in a strange format. Find a way        
    to make this into a time attribute that you can use to divide into groups.

# we use following UDF to convert violation time field strange format to understandable time format (eg: 1203A to 12:03 AM)
  
import sys

for line in sys.stdin:
    line = line.strip("\n\r")
    time = str(line)
    print(time[0:2]+":"+time[2:4]+" "+time[4:5]+"M")

# add UDF file  

hive> add file /tmp/data_hive/python_udf.py;
Added resources: [/tmp/data_hive/python_udf.py]

# query:

hive> select transform(violation_time) using 'python python_udf.py' as violation_time,violation_description from parking_data_analysis limit 5;

violation_time  violation_description
03:15 PM        "28-O/T STD
09:28 AM        "28-O/T STD
04:14 PM        75-No Match-Plate/Reg. Sticker
11:13 AM        20A-No Parking (Non-COM)
01:55 PM        40-Fire Hydrant



============================================================================================================================================================
 

6.) Divide 24 hours into 6 equal discrete bins of time. The intervals you choose are at your discretion. For each of these groups, find the 3 most commonly occurring violations

hive> select violation_code ,count(violation_code) as freq_violation from parking_data_analysis
    > where violation_time between '0000A' and '0400A'
    > group by violation_code
    > order by violation desc
    > limit 3;
hive> select violation_code ,count(violation_code) as Freq_violation from parking_data_analysis
    > where violation_time between '0400A' and '0800A'
    > group by violation_code
    > order by freq_violation desc
    > limit 3;
hive> select violation_code ,count(violation_code) as Freq_violation from parking_data_analysis
    > where violation_time between '0800A' and '1200P'
    > group by violation_code
    > order by freq_violation desc
    > limit 3;
hive> select violation_code ,count(violation_code) as Freq_violation from parking_data_analysis
    > where violation_time between '0000P' and '0400P'
    > group by violation_code
    > order by freq_violation desc
    > limit 3;
hive> select violation_code ,count(violation_code) as Freq_violation from parking_data_analysis
    > where violation_time between '0400P' and '0800P'
    > group by violation_code
    > order by freq_violation desc
    > limit 3;
hive> select violation_code ,count(violation_code) as Freq_violation from parking_data_analysis
    > where violation_time between '0800P' and '1159P'
    > group by violation_code
    > order by freq_violation desc
    > limit 3;



    ---------------------------------------------------
		violation_code     |    freq_violation
    ---------------------------------------------------
			38      			184994
			36      			184293
			37      			130719
    ---------------------------------------------------
			14             	150626
			38      			104140
			40      			86379
    ---------------------------------------------------
			21      			601075
			36      			349869
			38      			197667
    ---------------------------------------------------
			38      			185610
			36      			184476
			37      			131216
    ---------------------------------------------------
			14      			150666
			38      			104195
			40      			86361
    ---------------------------------------------------
			21      			598204
			36      			347672
			38      			196905



Now, try another direction. For the 3 most commonly occurring violation codes, find the most common times of day (in terms of the bins from the previous part)
Letâ€™s try and find some seasonality in this data
      a.) First, divide the year into some number of seasons, and find frequencies of tickets for each season. (Hint: A quick Google search reveals the following seasons in NYC: Spring(March, April, March); Summer(June, July, August); Fall(September, October, November); Winter(December, January, February))
      b.)Then, find the 3 most common violations for each of these seasons.

Note: Please ensure you make necessary optimizations to your queries like selecting the appropriate table format, using partitioned/bucketed tables. Marks will be awarded for keeping the performance also in mind.